name: "Continuous Deployment"

# This workflow requires https://docs.pypi.org/trusted-publishers/ to be enabled for the repository.
# Follow instructions from this link to enable it.
# Use this workflow (`publish.yml`) in the configuration.
# Please note this process has to be repeated for Test PyPI and PyPI separately.

on:
  push:
    tags:
      - 'v*'  # push events to matching v*, i.e. v1.0, v20.15.10
      - 'draft/v*'

env:
  PYTHON_DEFAULT_VERSION: "3.12"

jobs:
# COOKIECUTTER{%- raw %}
  # Job to get version from tag
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      draft: ${{ steps.get-version.outputs.draft }}
      prerelease: ${{ steps.get-version.outputs.prerelease }}
      is_latest_version: ${{ steps.highest-version.outputs.is_latest_version }}
    steps:
      - name: Get version from tag
        id: get-version
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
              echo "draft=false" >> "$GITHUB_OUTPUT"
              echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
          else
              echo "draft=true" >> "$GITHUB_OUTPUT"
              echo "version=${GITHUB_REF#refs/tags/draft/v}" >> "$GITHUB_OUTPUT"
          fi
          export IS_PRERELEASE=$([[ ${{ github.ref }} =~ [^0-9]$ ]] && echo true || echo false)
          echo "prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the highest version in the repository
        id: highest-version
        run: |
          git fetch --tags
          highest_version=$(git tag --sort=-v:refname | grep -E '^v[0-9]+' | head -n 1)
          echo "highest_version=${highest_version#v}" >> "$GITHUB_OUTPUT"
          if [[ ${{ steps.get-version.outputs.version }} == "${highest_version#v}" ]] && [ "${{ steps.get-version.outputs.draft }}" == "false" ]; then
              echo "is_latest_version=true" >> "$GITHUB_OUTPUT"
          else
              echo "is_latest_version=false" >> "$GITHUB_OUTPUT"
          fi

  # Job for Python package publishing
  publish-python:
    needs: get-version
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      id-token: write  # allows publishing to PyPI
      contents: write  # allows uploading a GitHub release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Install dependencies
        run: python -m pip install --upgrade nox uv

      - name: Read the Changelog
        id: read-changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ needs.get-version.outputs.version }}
          path: ./CHANGELOG.md
        continue-on-error: ${{ fromJSON(needs.get-version.outputs.draft) }}

      - name: Build
        run: uv build

      - name: Sign distribution
        uses: sigstore/gh-action-sigstore-python@v3.1.0
        with:
          inputs: >-
            dist/*.tar.gz
            dist/*.whl

      - name: Create GitHub release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.get-version.outputs.version }}
          body: ${{ steps.read-changelog.outputs.changes }}
          draft: ${{ fromJSON(needs.get-version.outputs.draft) }}
          prerelease: ${{ fromJSON(needs.get-version.outputs.prerelease) }}
          files: >-
            dist/*.tar.gz
            dist/*.whl
            dist/*.sigstore

      - name: Remove signature files as pypa/gh-action-pypi-publish does not support them
        run: rm -f dist/*.sigstore dist/*.sigstore.json

      - name: Publish distribution ðŸ“¦ to TestPyPI
        if: ${{ needs.get-version.outputs.draft == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        if: ${{ needs.get-version.outputs.draft == 'false' }}
        uses: pypa/gh-action-pypi-publish@release/v1
# COOKIECUTTER{%- endraw %}

# COOKIECUTTER{% if cookiecutter.build_docker_image == "y" %}
# COOKIECUTTER{%- raw %}
  publish-docker:
    needs:
      - get-version
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      packages: write  # allows publishing to GitHub Container Registry
      contents: read   # required for the Docker build context
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Docker image tags
        id: docker-tags
        run: |
          if [ "${{ needs.get-version.outputs.draft }}" = "true" ]; then
            DOCKER_TAGS="ghcr.io/${{ github.repository }}:draft-${{ needs.get-version.outputs.version }}"
          else
            DOCKER_TAGS="ghcr.io/${{ github.repository }}:${{ needs.get-version.outputs.version }}"
            if [ "${{ needs.get-version.outputs.is_latest_version }}" = "true" ]; then
              DOCKER_TAGS="$DOCKER_TAGS,ghcr.io/${{ github.repository }}:latest"
            fi
          fi
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$DOCKER_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        env:
          IMAGE_NAME: ${{ github.repository }}  # Defaults to the repo name for the Docker image
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker-tags.outputs.tags }}
# COOKIECUTTER{%- endraw %}
# COOKIECUTTER{%- endif %}
